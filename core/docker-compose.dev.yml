# ðŸ§ª AURA Intelligence Development Testing
# Simple local environment for testing shadow mode

version: '3.8'

services:
  # === POSTGRESQL (for shadow mode data) ===
  postgres:
    image: postgres:16-alpine
    container_name: aura-postgres-dev
    environment:
      - POSTGRES_DB=aura_dev
      - POSTGRES_USER=aura_dev
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - aura-dev

  # === NEO4J (for knowledge graph) ===
  neo4j:
    image: neo4j:5.15-community
    container_name: aura-neo4j-dev
    environment:
      - NEO4J_AUTH=neo4j/dev_password
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
    volumes:
      - neo4j_dev_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - aura-dev

  # === REDIS (for caching) ===
  redis:
    image: redis:7-alpine
    container_name: aura-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    networks:
      - aura-dev

  # === GRAFANA (for dashboards) ===
  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana-dev
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_dev_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - aura-dev

  # === PROMETHEUS (for metrics) ===
  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus-dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_dev_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aura-dev

volumes:
  postgres_dev_data:
  neo4j_dev_data:
  redis_dev_data:
  grafana_dev_data:
  prometheus_dev_data:

networks:
  aura-dev:
    driver: bridge

# === DEVELOPMENT TESTING COMMANDS ===
#
# 1. Start development environment:
#    docker-compose -f docker-compose.dev.yml up -d
#
# 2. Check services are running:
#    docker-compose -f docker-compose.dev.yml ps
#
# 3. Run our development test:
#    python run_dev_test.py
#
# 4. Access services:
#    - Neo4j Browser: http://localhost:7474 (neo4j/dev_password)
#    - Grafana: http://localhost:3000 (admin/admin)
#    - Prometheus: http://localhost:9090
#
# 5. Stop development environment:
#    docker-compose -f docker-compose.dev.yml down
#
# 6. Clean up (removes all data):
#    docker-compose -f docker-compose.dev.yml down -v
