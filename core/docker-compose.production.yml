# ðŸš€ AURA Intelligence Phase 3D: Production Deployment
# Docker Compose for shadow mode data collection

version: '3.8'

services:
  # === AURA INTELLIGENCE PRODUCTION API ===
  aura-production:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: aura-intelligence-production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PHASE=3D_ACTIVE_MODE
      - SHADOW_MODE=enabled
      - SECRET_KEY=${SECRET_KEY:-aura-production-secret-key-change-in-production}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aura_production_password}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_production_password}
      - REDIS_HOST=redis
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - neo4j
      - redis
      - prometheus
    networks:
      - aura-production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === POSTGRESQL DATABASE ===
  postgres:
    image: postgres:16-alpine
    container_name: aura-postgres-production
    environment:
      - POSTGRES_DB=aura_intelligence
      - POSTGRES_USER=aura_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aura_production_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aura-production
    restart: unless-stopped

  # === NEO4J KNOWLEDGE GRAPH ===
  neo4j:
    image: neo4j:5.15-community
    container_name: aura-neo4j-production
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j_production_password}
      - NEO4J_PLUGINS=["graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - aura-production
    restart: unless-stopped

  # === REDIS CACHE & SESSIONS ===
  redis:
    image: redis:7-alpine
    container_name: aura-redis-production
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_production_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aura-production
    restart: unless-stopped

  # === PROMETHEUS MONITORING ===
  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus-production
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aura-production
    restart: unless-stopped

  # === GRAFANA DASHBOARDS ===
  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana-production
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_production_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - aura-production
    restart: unless-stopped

  # === QDRANT VECTOR DATABASE ===
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aura-qdrant-production
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - aura-production
    restart: unless-stopped

  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: aura-nginx-production
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - aura-production
      - grafana
    networks:
      - aura-production
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  prometheus_data:
  grafana_data:
  qdrant_data:

networks:
  aura-production:
    driver: bridge

# === PRODUCTION DEPLOYMENT COMMANDS ===
# 
# 1. Start production deployment:
#    docker-compose -f docker-compose.production.yml up -d
#
# 2. Monitor logs:
#    docker-compose -f docker-compose.production.yml logs -f aura-production
#
# 3. Check health:
#    curl http://localhost:8000/health
#
# 4. Access governance dashboard:
#    http://localhost:8000/dashboard
#
# 5. Access Grafana monitoring:
#    http://localhost:3000 (admin/admin_production_password)
#
# 6. Export shadow data:
#    curl http://localhost:8000/shadow-data-export
#
# 7. Production metrics:
#    curl http://localhost:8000/production-metrics
