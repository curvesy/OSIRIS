# ðŸ§ª Real End-to-End Pipeline Testing Environment
# 
# Complete containerized test environment for validating Hotâ†’Coldâ†’Wise data flow
# Run with: docker-compose -f tests/integration/docker-compose.test.yml up -d

version: '3.8'

services:
  # DuckDB service for hot memory testing
  duckdb:
    image: alpine:latest
    volumes:
      - ./test_data:/data
      - ./scripts:/scripts
    command: sleep infinity
    environment:
      - DUCKDB_PATH=/data/test.db
    networks:
      - test-network

  # Redis with vector search for semantic memory testing
  redis:
    image: redis/redis-stack:7.2.0-v10
    command: >
      redis-server
      --loadmodule /opt/redis-stack/lib/redisearch.so
      --loadmodule /opt/redis-stack/lib/redisgraph.so
      --save ""
      --appendonly no
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight
    environment:
      - REDIS_ARGS=--save "" --appendonly no
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible cold storage testing
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Test runner with all dependencies
  test-runner:
    build:
      context: ../../
      dockerfile: tests/integration/Dockerfile.test
    environment:
      # Database connections
      DUCKDB_PATH: /data/test.db
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: test-forge
      
      # Test configuration
      TEST_MODE: integration
      LOG_LEVEL: INFO
      PYTHONPATH: /app/src
      
      # Performance test settings
      LOAD_TEST_USERS: 50
      LOAD_TEST_DURATION: 120
      SLA_LATENCY_MS: 60
      
      # Data quality settings
      GREAT_EXPECTATIONS_CONFIG: /app/tests/quality/great_expectations.yml
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../../:/app
      - ./test_data:/data
      - test_results:/app/test-results
    working_dir: /app
    networks:
      - test-network
    command: tail -f /dev/null  # Keep container running

  # Prometheus for metrics collection during tests
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.test.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - test-network

  # Grafana for test result visualization
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - test-network
    depends_on:
      - prometheus

  # Load testing service with Locust
  locust:
    image: locustio/locust:latest
    command: >
      locust 
      -f /app/tests/load/test_search_load.py 
      --host=http://test-runner:8000
      --web-host=0.0.0.0
      --web-port=8089
    ports:
      - "8089:8089"
    volumes:
      - ../../:/app
    networks:
      - test-network
    depends_on:
      - test-runner
    environment:
      - LOCUST_LOCUSTFILE=/app/tests/load/test_search_load.py
      - LOCUST_HOST=http://test-runner:8000

volumes:
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  test_results:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
